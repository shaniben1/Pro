import hudson.*;


pipeline {

    options {
        buildDiscarder(logRotator(daysToKeepStr: '10', numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()
        //retry(2)
        timeout(time: 3, unit: 'MINUTES')
    }

    //insert credential to environment variable
    //insert to specific environment variable (must this name: SNYK_TOKEN) my snyk's token
//    environment{
//       SNYK_TOKEN=credentials('snykToken')
//    }


    agent any



//    stages {
        stage('Test') {
           parallel {
                   stage('pytest'){
                        steps{
                          catchError(message:'pytest ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                            withCredentials([file(credentialsId: 'telegramToken', variable: 'TOKEN_FILE')]) {
                              sh "cp ${TOKEN_FILE} .telegramToken"
                              sh 'pip3 install -r requirements.txt'
                              sh 'python3 -m pytest --junitxml results.xml tests/*.py'
                              }
                           }
                        }
                    }

                   stage('pylint') {
                        steps {
                            catchError(message:'pylint ERROR',buildResult:'UNSTABLE',stageResult:'UNSTABLE'){
                                script {
                                    log.info 'Starting'
                                    log.warning 'Nothing to do!'
                                    sh "python3 -m pylint *.py || true"
                                       }
                                  }
                               }
                            }
                        }
                    }



/*
        //build image dockerhub
        stage('Build my app') {
             steps {
                   sh "docker build -t shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} . "

                   }
                 }

        //build image ECR
        stage('Build Bot app') {
             steps {
                  sh "docker build -t shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} . "
                  sh "docker tag shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER}"

                   }
                 }




   //snyk - test image
   //dockerhub
        stage('snyk test - Bot image') {
            steps {
                sh "snyk container test --severity-threshold=critical --policy-path=PolyBot/.snyk shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER} --file=Dockerfile || true"

                  }
               }
*/
   //ECR
   /*
        stage('snyk test - Bot image') {
            steps {
                sh "snyk container test --severity-threshold=critical --policy-path=PolyBot/.snyk 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER} --file=Dockerfile || true"

                  }
               }


        stage('push image to DockerHub') {
            steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'pass', usernameVariable: 'user')]){
                   sh "docker login --username $user --password $pass"
                   sh "docker push shaniben/shani-repo:poly-bot-${env.BUILD_NUMBER}"
              }
            }
         }
*/
        //stage('push image to ECR repo') {
        //    steps {
        //       withEnv (["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}" , "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}" , "AWS_REGION=${env.AWS_REGION}"]){
        //            sh 'docker login -u AWS -p $(aws ecr get-login-password --region eu-west-1) 019273956931.dkr.ecr.eu-west-1.amazonaws.com'
        //            sh "docker push 019273956931.dkr.ecr.eu-west-1.amazonaws.com/shani-ecr-repo:poly-bot-${env.BUILD_NUMBER}"

        //       }
        //    }
        // }

    }//close stages

        post{
          always{
            junit allowEmptyResults: true, testResults: 'results.xml'
            }


       }




}//close pipeline